// #pragma kernel VoxelizeMesh
// #pragma kernel FillVolume

// struct Triangle
// {
//     float3 a, b, c;
// };

// struct AABB
// {
//     float3 center;
//     float3 extents;
// };

// RWStructuredBuffer<float4> _VoxelGridPoints;

// RWStructuredBuffer<int> occupancy_grid;

// float4 _BoundsMin;
// float _CellHalfSize;
// int _GridWidth;
// int _GridHeight;
// int _GridDepth;

// float4x4 _WorldToGridMatrix;

// bool noObjInCollider;

// RWStructuredBuffer<float3> vertices_array;
// int verticies_number;

// RWStructuredBuffer<int> triangles_array;
// int triangles_number;

// float4x4 _ObjectToGridMatrix;



 
// bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis) {
//     float p0 = dot(v0, axis);
//     float p1 = dot(v1, axis);
//     float p2 = dot(v2, axis);

//     float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
//         aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
//         aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

//     float maxP = max(p0, max(p1, p2));
//     float minP = min(p0, min(p1, p2));

//     return !(max(-maxP, minP) > r);
// }

// bool IntersectsTriangleAabb(Triangle tri, AABB aabb) {

//     tri.a -= aabb.center;
//     tri.b -= aabb.center;
//     tri.c -= aabb.center;

//     float3 ab = normalize(tri.b - tri.a);
//     float3 bc = normalize(tri.c - tri.b);
//     float3 ca = normalize(tri.a - tri.c);

//     //Cross ab, bc, and ca with (1, 0, 0)
//     float3 a00 = float3(0.0, -ab.z, ab.y);
//     float3 a01 = float3(0.0, -bc.z, bc.y);
//     float3 a02 = float3(0.0, -ca.z, ca.y);

//     //Cross ab, bc, and ca with (0, 1, 0)
//     float3 a10 = float3(ab.z, 0.0, -ab.x);
//     float3 a11 = float3(bc.z, 0.0, -bc.x);
//     float3 a12 = float3(ca.z, 0.0, -ca.x);

//     //Cross ab, bc, and ca with (0, 0, 1)
//     float3 a20 = float3(-ab.y, ab.x, 0.0);
//     float3 a21 = float3(-bc.y, bc.x, 0.0);
//     float3 a22 = float3(-ca.y, ca.x, 0.0);

//     if (
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
//         !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
//     )
//     {
//         return false;
//     }

//     return true;
// }

// bool IntersectsRayTriangle(float3 rayOrigin, float3 rayDirection, Triangle tri, out float hitDistance, out float3 hitNormal) {
//     const float epsilon = 0.0000001;

//     float3 ab = tri.b - tri.a;
//     float3 ac = tri.c - tri.a;

//     float3 h = cross(rayDirection, ac);
//     float a = dot(ab, h);

//     if (a > -epsilon && a < epsilon) return false;

//     float f = 1.0 / a;
//     float3 s = rayOrigin - tri.a;
//     float u = f * dot(s, h);
//     if (u < 0.0 || u > 1.0) return false;

//     float3 q = cross(s, ab);
//     float v = f * dot(rayDirection, q);
//     if (v < 0.0 || u + v > 1.0) return false;

//     float t = f * dot(ac, q);
//     float3 bc = tri.c - tri.b;
//     hitNormal = cross(ab, bc);
//     hitDistance = t;
//     return t > epsilon;
// }

float3 pointTransform (float4x4 mat, float3 pos) {
    float4 tmp = float4(pos.x, pos.y, pos.z, 1.0);
    return mul(mat, tmp).xyz;
}

// [numthreads(8,8,8)]
// void VoxelizeMesh(uint3 id : SV_DispatchThreadID) {
//     if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth) return;

//     const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);

//     if (noObjInCollider) {
//         occupancy_grid[voxelIndex] = 0.0;
//         return;
//     }

//     const float cellSize = _CellHalfSize * 2.0;

//     const float4 centerPos = float4(id.x * cellSize + _CellHalfSize + _BoundsMin.x,
//                                     id.y * cellSize + _CellHalfSize + _BoundsMin.y,
//                                     id.z * cellSize + _CellHalfSize + _BoundsMin.z, 1.0);

//     uint nbObjects = 0;
//     uint strid = 0;
//     _ObjectToGridMatrix.GetDimensions(nbObjects, strid);

//     AABB aabb;
//     aabb.center = mul(_WorldToGridMatrix, centerPos);
//     aabb.extents = float3(_CellHalfSize, _CellHalfSize, _CellHalfSize);

//     int precedentV = 0;
//     int precedentT = 0;
//     bool intersects = false;
//     for (int i = 0; i < nbObjects; i++) {
//         for (int j = precedentT; j < precedentT + triangles_number[i] && !intersects; j += 3) {
//             Triangle tri;

//             tri.a = pointTransform(_ObjectToGridMatrix[i], vertices_array[triangles_array[j]+precedentV]);
//             tri.b = pointTransform(_ObjectToGridMatrix[i], vertices_array[triangles_array[j + 1]+precedentV]);
//             tri.c = pointTransform(_ObjectToGridMatrix[i], vertices_array[triangles_array[j + 2]+precedentV]);
//             intersects = IntersectsTriangleAabb(tri, aabb);

//             if (intersects)
//                 break;
//         }
//         if (intersects)
//             break;
//         precedentV += verticies_number[i];
//     }


//     // const float3 position = float3(_BoundsMin.x + id.x * cellSize,
//     //                                _BoundsMin.y + id.y * cellSize,
//     //                                _BoundsMin.z + id.z * cellSize);

//     occupancy_grid[voxelIndex] = intersects ? 1.0 : 0.0;
// }

// [numthreads(8,8,8)]
// void FillVolume(uint3 id : SV_DispatchThreadID)
// {
//     if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth)
//         return;

//     const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);
//     if (occupancy_grid[voxelIndex] > 0.0)
//         return;

//     const float cellSize = _CellHalfSize * 2.0;
//     float3 rayOrigin = mul(_WorldToGridMatrix,
//                            float4(id.x * cellSize + _CellHalfSize + _BoundsMin.x,
//                                   id.y * cellSize + _CellHalfSize + _BoundsMin.y,
//                                   id.z * cellSize + _CellHalfSize + _BoundsMin.z, 1.0));
//     float3 rayDirection = float3(0, 0, 1);
//     float minDistance = 10000000.0;
//     float3 minDistanceNormal;
//     bool didIntersect = false;

//     uint nbObjects = 0;
//     uint strid = 0;
//     _ObjectToGridMatrix.GetDimensions(nbObjects, strid);

//     int precedentV = 0;
//     int precedentT = 0;
//     bool intersects = false;
//     for (int i = 0; i < nbObjects; i++) {
//         for (int j = precedentT; j < precedentT + triangles_number[i]; j += 3) {
//             Triangle tri;
//             tri.a = mul(_ObjectToGridMatrix[i], vertices_array[triangles_array[j]-precedentV]);
//             tri.b = mul(_ObjectToGridMatrix[i], vertices_array[triangles_array[j + 1]-precedentV]);
//             tri.c = mul(_ObjectToGridMatrix[i], vertices_array[triangles_array[j + 2]-precedentV]);

//             float3 outNormal;
//             float distance;
//             if (IntersectsRayTriangle(rayOrigin, rayDirection, tri, distance, outNormal))
//             {
//                 if (distance < minDistance)
//                 {
//                     minDistance = distance;
//                     minDistanceNormal = outNormal;
//                     didIntersect = true;
//                 }
//             }
//         }
//         precedentV += verticies_number[i];
//     }

//     if (didIntersect && dot(minDistanceNormal, rayDirection) > 0.0)
//         occupancy_grid[voxelIndex] = 1.0;
// }

#pragma kernel InitOccupencyGrid
#pragma kernel VoxelizeMesh
#pragma kernel FillVolume

struct Triangle
{
    float3 a, b, c;
};

struct AABB
{
    float3 center;
    float3 extents;
};

RWStructuredBuffer<float> occupancy_grid;
StructuredBuffer<float3> vertices_array;
StructuredBuffer<int> triangles_array;

float4x4 _ObjectToWorldMatrix;

float4x4 _WorldToGridMatrix;

int triangles_number;

float4 _BoundsMin;

float _CellHalfSize;
int _GridWidth;
int _GridHeight;
int _GridDepth;
bool first;

bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis)
{
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
        aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
        aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}

bool IntersectsTriangleAabb(Triangle tri, AABB aabb, float4x4 mat)
{
    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = normalize(tri.b - tri.a);
    float3 bc = normalize(tri.c - tri.b);
    float3 ca = normalize(tri.a - tri.c);

    //Cross ab, bc, and ca with (1, 0, 0)
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    //Cross ab, bc, and ca with (0, 1, 0)
    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    //Cross ab, bc, and ca with (0, 0, 1)
    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    if (
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
    )
    {
        return false;
    }

    return true;
}

bool IntersectsRayTriangle(float3 rayOrigin, float3 rayDirection, Triangle tri, out float hitDistance,
                           out float3 hitNormal)
{
    const float epsilon = 0.0000001;

    float3 ab = tri.b - tri.a;
    float3 ac = tri.c - tri.a;

    float3 h = cross(rayDirection, ac);
    float a = dot(ab, h);

    if (a > -epsilon && a < epsilon) return false;

    float f = 1.0 / a;
    float3 s = rayOrigin - tri.a;
    float u = f * dot(s, h);
    if (u < 0.0 || u > 1.0) return false;

    float3 q = cross(s, ab);
    float v = f * dot(rayDirection, q);
    if (v < 0.0 || u + v > 1.0) return false;

    float t = f * dot(ac, q);
    float3 bc = tri.c - tri.b;
    hitNormal = cross(ab, bc);
    hitDistance = t;
    return t > epsilon;
}

[numthreads(4,4,4)]
void InitOccupencyGrid(uint3 id : SV_DispatchThreadID)
{
    const float cellSize = _CellHalfSize * 2.0;
    const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);
    occupancy_grid[voxelIndex] = 0.0;
}

[numthreads(4,4,4)]
void VoxelizeMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth) return;

    const float cellSize = _CellHalfSize * 2.0;

    const float4 centerPos = float4(id.x * cellSize + _CellHalfSize + _BoundsMin.x,
                                    id.y * cellSize + _CellHalfSize + _BoundsMin.y,
                                    id.z * cellSize + _CellHalfSize + _BoundsMin.z, 1.0);

    AABB aabb;
    aabb.center = centerPos;//mul(_WorldToGridMatrix, centerPos);
    aabb.extents = float3(_CellHalfSize, _CellHalfSize, _CellHalfSize);

    bool intersects = false;
    for (int i = 0; i < triangles_number; i += 3)
    {
        Triangle tri;
        tri.a = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i]]));
        tri.b = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i + 1]]));
        tri.c = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i + 2]]));
        intersects = IntersectsTriangleAabb(tri, aabb, _WorldToGridMatrix);

        if (intersects)
            break;
    }

    const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);

    /*const float3 position = float3(_BoundsMin.x + id.x * cellSize,
                                   _BoundsMin.y + id.y * cellSize,
                                   _BoundsMin.z + id.z * cellSize);*/

    if (intersects)
        occupancy_grid[voxelIndex] = 1.0;
}

[numthreads(4,4,4)]
void FillVolume(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth)
        return;

    const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);
    /*if (_Voxels[voxelIndex].isSolid > 0.0)
        return;*/

    const float cellSize = _CellHalfSize * 2.0;
    float3 rayOrigin = float4(id.x * cellSize + _CellHalfSize + _BoundsMin.x,
                                  id.y * cellSize + _CellHalfSize + _BoundsMin.y,
                                  id.z * cellSize + _CellHalfSize + _BoundsMin.z, 1.0);
    float3 rayDirection = float3(0, 0, 1);
    float minDistance = 10000000.0;
    float3 minDistanceNormal;
    bool didIntersect = false;

    for (int i = 0; i < triangles_number; i += 3)
    {
        Triangle tri;
        tri.a = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i]]));
        tri.b = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i + 1]]));
        tri.c = pointTransform(_WorldToGridMatrix, pointTransform(_ObjectToWorldMatrix, vertices_array[triangles_array[i + 2]]));
        float3 outNormal;
        float distance;
        if (IntersectsRayTriangle(rayOrigin, rayDirection, tri, distance, outNormal))
        {
            if (distance < minDistance)
            {
                minDistance = distance;
                minDistanceNormal = outNormal;
                didIntersect = true;
            }
        }
    }

    if (didIntersect && dot(minDistanceNormal, rayDirection) > 0.0)
        occupancy_grid[voxelIndex] = 1.0;
}

/*    void main(   
        in float3 local     : TEXCOORD0,
        in float3 triangle  : TEXCOORD1,   
        in float3 nv0       : TEXCOORD2,   
        in float3 nv1       : TEXCOORD3,   
        in float3 nv2       : TEXCOORD4,   
        in float3 ne0       : TEXCOORD5,   
        in float3 ne1       : TEXCOORD6,  
        in float3 ne2       : TEXCOORD7,   
        out float4 dist     : COLOR0,   
        out float  absDist  : DEPTH,   
        const uniform float narrowbandSize) 
    {   
        // Copy to temporaries.    
        float   a = triangle.x;   
        float   b = triangle.y;   
        float   h = triangle.z;   
        float   r = local.x;   
        float   s = local.y;   
        float   t = local.z;   
        float3 nv = nv1;   
        float3 ne = ne1;   
        // Normalize to half-space r >= 0.    
        if (r < 0) {     
            r = -r;     
            a =  b;     
            nv = nv0;     
            ne = ne2; 
        } 
        // Transform to the primed coordinate frame.    
        float lensqr = (a * a + h * h); 
        float rprime = (a * r + h * h - h * s) / lensqr; 
        float sprime = (a * s + h * r - h * a) / lensqr; 
        // Case analysis    
        // Default to region I    
        float3 c = float3(0, 0, 0); 
        float3 n = float3(0, 0, 1); 
        if (s < 0) {   
            // Region III or II   
            c.x = a;   
            n = (r > a) ? nv : ne0; 
        } else if (sprime > 0) {   
            if (rprime < 0) {     
                // Region VI     
                c.y = h;     
                n = nv2;   
            } else {     
                // Region IV or V     
                c.x = a;     
                n = (rprime > 1) ? nv : ne;   
            } 
        } 
        // IV, V, VI 
        rprime = max(max(- rprime,0), rprime - 1); 
        // I, V 
        sprime = max(sprime,0); 
        // II, III 
        r      = max(r-a,0); 
        // Compute the distance.    
        float tmp = (s < 0) ? (r * r + s * s) : ((rprime * rprime + sprime * sprime) * lensqr); 
        absDist = sqrt(tmp + t * t); 
        // Compute the sign.    
        float sign_tst = sign(dot(n, local - c)); 
        dist = float4(sign_tst * absDist, local); 
        // Depth buffer is clamped to 0..1, so we rescale. 
        absDist /= narrowbandSize; 
    } 
*/